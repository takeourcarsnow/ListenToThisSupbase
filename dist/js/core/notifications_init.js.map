{
  "version": 3,
  "sources": ["../../../js/core/notifications.js", "../../../js/views/notifications_view.js", "../../../js/core/utils.js", "../../../js/core/config.js", "../../../js/core/db.js", "../../../js/core/app_state.js", "../../../js/core/notifications_init.js"],
  "sourcesContent": ["// Core notification logic for in-app notifications\r\n// Usage: notifications.add('Message', 'success'|'error'|'info');\r\n\r\n\r\nconst NOTIF_KEY = 'tunedin.notifications';\r\nfunction loadPersisted() {\r\n  try {\r\n    const raw = localStorage.getItem(NOTIF_KEY);\r\n    if (!raw) return [];\r\n    const arr = JSON.parse(raw);\r\n    // Remove expired (timeout=0 means persistent)\r\n    const now = Date.now();\r\n    return arr.filter(n => !n.expires || n.expires > now);\r\n  } catch { return []; }\r\n}\r\n\r\nconst notifications = {\r\n  list: loadPersisted(),\r\n  add(message, type = 'info', timeout = 4000) {\r\n    const id = Date.now() + Math.random();\r\n    let expires = undefined;\r\n    if (timeout > 0) expires = Date.now() + timeout;\r\n    this.list.push({ id, message, type, expires });\r\n    this._persist();\r\n    this._notifyChange();\r\n    if (timeout > 0) {\r\n      setTimeout(() => this.remove(id), timeout);\r\n    }\r\n    return id;\r\n  },\r\n  remove(id) {\r\n    this.list = this.list.filter(n => n.id !== id);\r\n    this._persist();\r\n    this._notifyChange();\r\n  },\r\n  clear() {\r\n    this.list = [];\r\n    this._persist();\r\n    this._notifyChange();\r\n  },\r\n  _listeners: [],\r\n  subscribe(fn) {\r\n    this._listeners.push(fn);\r\n    return () => {\r\n      this._listeners = this._listeners.filter(l => l !== fn);\r\n    };\r\n  },\r\n  _notifyChange() {\r\n    this._listeners.forEach(fn => fn(this.list));\r\n  },\r\n  _persist() {\r\n    try {\r\n      localStorage.setItem(NOTIF_KEY, JSON.stringify(this.list));\r\n    } catch {}\r\n  }\r\n};\r\n\r\nexport default notifications;\r\n", "// UI component for notifications (simple toast system)\r\n// Usage: import notificationsView from './notifications_view.js'; notificationsView.init();\r\nimport notifications from '../core/notifications.js';\r\n\r\n\r\nconst containerId = 'notifications-popup-container';\r\n\r\nconst notificationsView = {\r\n  container: null,\r\n  currentTimeout: null,\r\n  init() {\r\n    if (document.getElementById(containerId)) return;\r\n    this.container = document.createElement('div');\r\n    this.container.id = containerId;\r\n    this.container.style.position = 'fixed';\r\n    this.container.style.top = '0';\r\n    this.container.style.left = '50%';\r\n    this.container.style.transform = 'translateX(-50%)';\r\n    this.container.style.zIndex = '9999';\r\n    this.container.style.width = '100%';\r\n    this.container.style.maxWidth = '400px';\r\n    this.container.style.pointerEvents = 'none';\r\n    this.container.style.display = 'flex';\r\n    this.container.style.justifyContent = 'center';\r\n    this.container.style.alignItems = 'flex-start';\r\n    this.container.style.background = 'none';\r\n    this.container.style.border = 'none';\r\n    this.container.style.boxShadow = 'none';\r\n    this.container.style.transition = 'none';\r\n    document.body.appendChild(this.container);\r\n    notifications.subscribe(this.render.bind(this));\r\n    this.render(notifications.list);\r\n  },\r\n  render(list) {\r\n    if (!this.container) return;\r\n    this.container.innerHTML = '';\r\n    if (!list.length) return;\r\n    // Only show notifications that are unseen (id > lastSeen)\r\n    const NOTIF_SEEN_KEY = 'tunedin.notifications.lastSeen';\r\n    let lastSeen = +(localStorage.getItem(NOTIF_SEEN_KEY) || 0);\r\n    const unseen = list.filter(n => n.id > lastSeen);\r\n    if (!unseen.length) return;\r\n    // Mark all currently shown as seen immediately\r\n    const maxId = Math.max(...unseen.map(n => n.id));\r\n    if (maxId > lastSeen) {\r\n      localStorage.setItem(NOTIF_SEEN_KEY, String(maxId));\r\n      lastSeen = maxId;\r\n    }\r\n    // Show all unseen notifications, most recent last\r\n    unseen.forEach(n => {\r\n      const el = document.createElement('div');\r\n      el.textContent = n.message;\r\n      el.className = `notification-popup ${n.type}`;\r\n      el.style.pointerEvents = 'auto';\r\n      el.style.minWidth = '180px';\r\n      el.style.maxWidth = '360px';\r\n      el.style.margin = '0 auto';\r\n      el.style.marginTop = '16px';\r\n      el.style.padding = '12px 24px';\r\n      el.style.borderRadius = '8px';\r\n      el.style.background = n.type === 'success' ? '#4caf50' : n.type === 'error' ? '#f44336' : '#222e3a';\r\n      el.style.color = '#fff';\r\n      el.style.fontWeight = '500';\r\n      el.style.fontSize = '1.08em';\r\n      el.style.boxShadow = '0 4px 24px rgba(0,0,0,0.18)';\r\n      el.style.opacity = '0';\r\n      el.style.transform = 'translateY(-32px)';\r\n      el.style.transition = 'opacity 0.3s cubic-bezier(.4,0,.2,1), transform 0.3s cubic-bezier(.4,0,.2,1)';\r\n      el.style.textAlign = 'center';\r\n      setTimeout(() => {\r\n        el.style.opacity = '1';\r\n        el.style.transform = 'translateY(0)';\r\n      }, 10);\r\n      el.onclick = () => notifications.remove(n.id);\r\n      this.container.appendChild(el);\r\n    });\r\n    // No auto-hide: notifications persist until clicked\r\n    if (this.currentTimeout) clearTimeout(this.currentTimeout);\r\n    this.currentTimeout = null;\r\n  }\r\n};\r\n\r\nexport default notificationsView;\r\n", "// Simple email format validation\r\nexport function isValidEmailFormat(email) {\r\n  // Basic regex for demonstration; adjust as needed for stricter validation\r\n  return /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(email);\r\n}\r\nexport const $ = (sel, root=document) => root.querySelector(sel);\r\nexport function $$(a, b){\r\n  if(!b) return Array.from(document.querySelectorAll(a));\r\n  const root = (typeof a === 'string') ? document.querySelector(a) : a;\r\n  return Array.from(root ? root.querySelectorAll(b) : []);\r\n}\r\nexport const raf = (fn) => requestAnimationFrame(fn);\r\nexport const debounce = (fn, ms=200) => { let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), ms); }; };\r\nexport const safeClone = (o)=> (typeof structuredClone === 'function' ? structuredClone(o) : JSON.parse(JSON.stringify(o)));\r\n\r\nexport const uid = (p='id') => p + '_' + Math.random().toString(36).slice(2,8) + Date.now().toString(36);\r\n\r\nexport const esc = s => String(s).replace(/[&<>\"']/g, m=>({ '&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#039;' }[m]));\r\n\r\nexport const fmtTime = ts => {\r\n  const d = new Date(ts);\r\n  const diff = Date.now() - ts;\r\n  const sec = Math.round(diff/1000);\r\n  const min = Math.round(sec/60);\r\n  const hr  = Math.round(min/60);\r\n  const day = Math.round(hr/24);\r\n  if(sec < 45) return 'just now';\r\n  if(min < 60) return `${min}m ago`;\r\n  if(hr < 24)  return `${hr}h ago`;\r\n  if(day < 7)  return `${day}d ago`;\r\n  return d.toLocaleString();\r\n};\r\n\r\nexport const liveSay = (msg) => { const n = $('#live'); if(n) n.textContent = msg; };\r\n\r\nexport function copyText(t){\r\n  if(navigator.clipboard && location.protocol !== 'file:'){\r\n    return navigator.clipboard.writeText(t);\r\n  } else {\r\n    const ta = document.createElement('textarea');\r\n    ta.value = t; document.body.appendChild(ta);\r\n    ta.select(); ta.setSelectionRange(0, 99999);\r\n    const ok = document.execCommand && document.execCommand('copy');\r\n    ta.remove();\r\n    return ok ? Promise.resolve() : Promise.reject();\r\n  }\r\n}\r\n\r\nexport function toast(anchor, msg, warn){\r\n  const note = document.createElement('div');\r\n  note.className = 'notice small';\r\n  note.textContent = msg;\r\n  if(warn) note.classList.add('warn');\r\n  (anchor?.parentNode || document.body).insertBefore(note, anchor?.nextSibling || null);\r\n  setTimeout(()=> note.remove(), 1500);\r\n}\r\n\r\nexport function approxSize(str){\r\n  const bytes = new Blob([str]).size;\r\n  if(bytes < 1024) return bytes+' B';\r\n  if(bytes < 1024*1024) return (bytes/1024).toFixed(1)+' KB';\r\n  return (bytes/1024/1024).toFixed(2)+' MB';\r\n}\r\nexport function fmtBytes(n){\r\n  if(n < 1024) return n+' B';\r\n  if(n < 1024*1024) return (n/1024).toFixed(1)+' KB';\r\n  if(n < 1024*1024*1024) return (n/1024/1024).toFixed(2)+' MB';\r\n  return (n/1024/1024/1024).toFixed(2)+' GB';\r\n}\r\n\r\nexport function applyAccent(color){\r\n  try{\r\n    document.documentElement.style.setProperty('--acc', color || '#8ab4ff');\r\n    const meta = document.querySelector('meta[name=\"theme-color\"]');\r\n    if(meta) meta.setAttribute('content', '#0b0d10');\r\n  }catch{}\r\n}\r\nexport function applyDensity(d){\r\n  document.documentElement.setAttribute('data-density', d || 'cozy');\r\n}", "// Toggle remote vs local storage\r\nexport const USE_SUPABASE = true;\r\n\r\n// Put your Supabase project creds here (these are safe to be public; enforce RLS).\r\nexport const SUPABASE_URL = 'https://ykwbnqaobcirrpunnkkn.supabase.co';\r\nexport const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlrd2JucWFvYmNpcnJwdW5ua2tuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU2MDcwMjcsImV4cCI6MjA3MTE4MzAyN30.qoZg10-v6rmqW6RZDj9SGYio_DblzSfP3RTPBMoJBuM';", "\r\nimport { safeClone } from './utils.js';\r\n\r\n// Expanded list of common disposable email domains (update as needed)\r\n// Source: https://github.com/disposable/disposable-email-domains (partial)\r\nconst DISPOSABLE_EMAIL_DOMAINS = [\r\n  'mailinator.com', '10minutemail.com', 'guerrillamail.com', 'tempmail.com',\r\n  'yopmail.com', 'trashmail.com', 'getnada.com', 'dispostable.com', 'maildrop.cc',\r\n  'fakeinbox.com', 'mintemail.com', 'mytemp.email', 'throwawaymail.com',\r\n  'sharklasers.com', 'spamgourmet.com', 'mailnesia.com', 'temp-mail.org',\r\n  'emailondeck.com', 'moakt.com', 'mailcatch.com', 'mailnull.com',\r\n  '33mail.com', 'mailtemp.net', 'tempail.com', 'tempmail.net', 'tempmailaddress.com',\r\n  'tempmailbox.com', 'tempmails.net', 'trashmail.de', 'maildrop.cc', 'disposablemail.com',\r\n  'spambog.com', 'spambog.de', 'spambog.ru', 'spambog.xyz', 'spambog.pl',\r\n  'spambog.com', 'spambog.de', 'spambog.ru', 'spambog.xyz', 'spambog.pl',\r\n  'spam4.me', 'spamex.com', 'spaml.com', 'spammail.de', 'spammail.net',\r\n  'spammail.org', 'spamobox.com', 'spamspot.com', 'spamwc.com',\r\n  // ...add more as needed\r\n];\r\n\r\n// Checks if the email domain or any of its parent domains is in the blocklist\r\nfunction isDisposableEmail(email) {\r\n  if (!email || typeof email !== 'string') return false;\r\n  const domain = email.split('@')[1]?.toLowerCase();\r\n  if (!domain) return false;\r\n  // Check direct match and parent domains (subdomain blocking)\r\n  const parts = domain.split('.');\r\n  for (let i = 0; i < parts.length - 1; i++) {\r\n    const checkDomain = parts.slice(i).join('.');\r\n    if (DISPOSABLE_EMAIL_DOMAINS.includes(checkDomain)) return true;\r\n  }\r\n  return false;\r\n}\r\n// bcrypt is loaded globally from CDN in index.html\r\n\r\nimport { SUPABASE_URL, SUPABASE_ANON_KEY, USE_SUPABASE } from './config.js';\r\n\r\nconst DB_KEY_V2 = 'TunedIn.space/db@v2';\r\nconst DB_KEY_V1 = 'TunedIn.space/v1';\r\n\r\nconst defaultDB = { users:[], posts:[], createdAt: Date.now(), version: 2 };\r\n\r\nclass LocalAdapter {\r\n  async deleteUser(id) {\r\n    await this.init();\r\n    const i = (this.cache.users || []).findIndex(u => u.id === id);\r\n    if (i < 0) return false;\r\n    this.cache.users.splice(i, 1);\r\n    // Optionally, delete user's posts too:\r\n    this.cache.posts = (this.cache.posts || []).filter(p => p.userId !== id);\r\n    await this._save();\r\n    return true;\r\n  }\r\n  constructor(){ this.cache = null; this.isRemote = false; }\r\n\r\n  async init(){\r\n    if(this.cache) return this.cache;\r\n    const v2 = localStorage.getItem(DB_KEY_V2);\r\n    if(v2){\r\n      try { this.cache = JSON.parse(v2); }\r\n      catch { this.cache = safeClone(defaultDB); }\r\n      return this.cache;\r\n    }\r\n    const v1 = localStorage.getItem(DB_KEY_V1);\r\n    if(v1){\r\n      try{\r\n        const old = JSON.parse(v1);\r\n        this.cache = { ...defaultDB, ...old, version:2 };\r\n        await this._save();\r\n      }catch{\r\n        this.cache = safeClone(defaultDB);\r\n      }\r\n      return this.cache;\r\n    }\r\n    this.cache = safeClone(defaultDB);\r\n    return this.cache;\r\n  }\r\n  getAll(){ return this.cache || defaultDB; }\r\n  async refresh(){ return this.cache; }\r\n  async _save(){ try{ localStorage.setItem(DB_KEY_V2, JSON.stringify(this.cache)); }catch{} }\r\n\r\n  async ensureUser(name, email, password) {\r\n    await this.init();\r\n    // Enforce required fields for local users\r\n    if (!email || !password || password.length < 6) {\r\n      throw new Error('Email and password (min 6 chars) are required.');\r\n    }\r\n    if (isDisposableEmail(email)) {\r\n      throw new Error('Disposable (temporary) email addresses are not allowed.');\r\n    }\r\n    let u = this.cache.users.find(x => x.name.toLowerCase() === name.toLowerCase() || (email && x.email === email));\r\n    if (!u) {\r\n      // Hash the password before storing\r\n      const salt = window.bcrypt.genSaltSync(10);\r\n      const hash = window.bcrypt.hashSync(password, salt);\r\n      u = {\r\n        id: crypto.randomUUID ? crypto.randomUUID() : 'u_' + Math.random().toString(36).slice(2),\r\n        name: name.trim(),\r\n        email: email,\r\n        password: hash, // store hash\r\n  about: '',\r\n  facebook: '',\r\n  instagram: '',\r\n  twitter: '',\r\n  bandcamp: '',\r\n  soundcloud: '',\r\n  youtube: '',\r\n  lastfm: '',\r\n        createdAt: Date.now()\r\n      };\r\n      this.cache.users.push(u); await this._save();\r\n    }\r\n    return u;\r\n  }\r\n\r\n  async loginUser(email, password) {\r\n    await this.init();\r\n    if (!email || !password || password.length < 6) return null;\r\n    const user = this.cache.users.find(u => u.email === email);\r\n    if (!user) return null;\r\n    // Only allow login if user has a non-empty password hash\r\n    if (!user.password || user.password.length < 6) return null;\r\n    // Compare password with hash\r\n  const isMatch = window.bcrypt.compareSync(password, user.password);\r\n    return isMatch ? user : null;\r\n  }\r\n  getUserById(id){ return (this.cache?.users || []).find(u=>u.id===id) || null; }\r\n\r\n  async createPost(p){ await this.init(); this.cache.posts.push(p); await this._save(); return p; }\r\n  async updatePost(id, patch){\r\n    await this.init();\r\n    const i = this.cache.posts.findIndex(x=>x.id===id);\r\n    if(i<0) return null;\r\n    this.cache.posts[i] = { ...this.cache.posts[i], ...patch };\r\n    await this._save();\r\n    return this.cache.posts[i];\r\n  }\r\n  async deletePost(id){\r\n    await this.init();\r\n    const i = this.cache.posts.findIndex(x=>x.id===id);\r\n    if(i<0) return;\r\n    this.cache.posts.splice(i,1);\r\n    await this._save();\r\n  }\r\n  async toggleLike(id, userId){\r\n    await this.init();\r\n    const p = this.cache.posts.find(x=>x.id===id);\r\n    if(!p) return null;\r\n    p.likes = p.likes || [];\r\n    const i = p.likes.indexOf(userId);\r\n    if(i>=0) p.likes.splice(i,1); else p.likes.push(userId);\r\n    await this._save();\r\n    return p;\r\n  }\r\n  async addComment(id, c){\r\n    await this.init();\r\n    const p = this.cache.posts.find(x=>x.id===id);\r\n    if(!p) return null;\r\n    p.comments = p.comments || [];\r\n    p.comments.push(c);\r\n    await this._save();\r\n    return p.comments;\r\n  }\r\n  async deleteComment(postId, commentId){\r\n    await this.init();\r\n    const p = this.cache.posts.find(x=>x.id===postId);\r\n    if(!p) return null;\r\n    p.comments = (p.comments || []).filter(c => c.id !== commentId);\r\n    await this._save();\r\n    return p.comments;\r\n  }\r\n\r\n  async updateUser(id, patch){\r\n    await this.init();\r\n    const i = (this.cache.users || []).findIndex(u => u.id === id);\r\n    if(i < 0) return null;\r\n    this.cache.users[i] = { ...this.cache.users[i], ...patch };\r\n    await this._save();\r\n    return this.cache.users[i];\r\n  }\r\n\r\n  async replaceAll(data){\r\n    this.cache = { version:2, createdAt: Date.now(), users: data.users||[], posts: data.posts||[] };\r\n    await this._save();\r\n  }\r\n  exportJSON(){\r\n    return JSON.stringify(this.cache || defaultDB, null, 2);\r\n  }\r\n}\r\n\r\nclass SupabaseAdapter {\r\n  async deleteUser(id) {\r\n    // Delete user posts first\r\n    const { error: postError } = await this.supabase.from('posts').delete().eq('user_id', id);\r\n    if (postError) console.error('deleteUser posts error', postError);\r\n    // Delete user\r\n    const { error: userError } = await this.supabase.from('users').delete().eq('id', id);\r\n    if (userError) console.error('deleteUser user error', userError);\r\n    await this.refresh();\r\n    return !userError;\r\n  }\r\n  constructor(url, key){\r\n    this.isRemote = true;\r\n    this.supabase = null;\r\n    this.cache = { ...defaultDB };\r\n    this.url = url;\r\n    this.key = key;\r\n  }\r\n  async init(){\r\n    if(!this.supabase){\r\n      const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2');\r\n      this.supabase = createClient(this.url, this.key);\r\n    }\r\n    await this.refresh();\r\n    return this.cache;\r\n  }\r\n  mapRowToPost(row){\r\n    return {\r\n      id: row.id,\r\n      userId: row.user_id,\r\n      title: row.title,\r\n      artist: row.artist,\r\n      url: row.url,\r\n      provider: row.provider || null,\r\n      tags: row.tags || [],\r\n      body: row.body || '',\r\n      likes: row.likes || [],\r\n      comments: row.comments || [],\r\n      createdAt: row.created_at ? new Date(row.created_at).getTime() : Date.now(),\r\n    };\r\n  }\r\n  mapPostToRow(p){\r\n    return {\r\n      id: p.id,\r\n      user_id: p.userId,\r\n      title: p.title,\r\n      artist: p.artist || null,\r\n      url: p.url,\r\n      provider: p.provider || null,\r\n      tags: p.tags || [],\r\n      body: p.body || null,\r\n      likes: p.likes || [],\r\n      comments: p.comments || [],\r\n      created_at: new Date(p.createdAt || Date.now()).toISOString(),\r\n    };\r\n  }\r\n  mapRowToUser(row){\r\n    return {\r\n      id: row.id,\r\n      name: row.name,\r\n      about: row.about || '',\r\n  facebook: row.facebook || '',\r\n  instagram: row.instagram || '',\r\n  twitter: row.twitter || '',\r\n  bandcamp: row.bandcamp || '',\r\n  soundcloud: row.soundcloud || '',\r\n  youtube: row.youtube || '',\r\n  lastfm: row.lastfm || '',\r\n      avatarUrl: row.avatarurl || '',\r\n      createdAt: row.created_at ? new Date(row.created_at).getTime() : Date.now()\r\n    };\r\n  }\r\n\r\n  async refresh(){\r\n    const [uRes, pRes] = await Promise.all([\r\n      this.supabase.from('users').select('*').order('created_at', { ascending: true }),\r\n      this.supabase.from('posts').select('*').order('created_at', { ascending: false }),\r\n    ]);\r\n    if(uRes.error) console.warn('Supabase users error', uRes.error);\r\n    if(pRes.error) console.warn('Supabase posts error', pRes.error);\r\n    const users = (uRes.data||[]).map(r=>this.mapRowToUser(r));\r\n    const posts = (pRes.data||[]).map(r=>this.mapRowToPost(r));\r\n    this.cache = { version:2, createdAt: this.cache.createdAt || Date.now(), users, posts };\r\n    return this.cache;\r\n  }\r\n  getAll(){ return this.cache; }\r\n\r\n  async ensureUser(name) {\r\n    // Always use the current authenticated user's UID as id\r\n    let userId = null;\r\n    if (this.supabase && this.supabase.auth && this.supabase.auth.getUser) {\r\n      const authUser = await this.supabase.auth.getUser();\r\n      userId = authUser?.data?.user?.id || authUser?.user?.id;\r\n    }\r\n    if (!userId) throw new Error('No authenticated user');\r\n    const existing = this.cache.users.find(u => u.id === userId || u.name.toLowerCase() === name.toLowerCase());\r\n    if (existing) return existing;\r\n    const user = {\r\n      id: userId,\r\n      name: name.trim(),\r\n      about: '',\r\n      createdAt: Date.now()\r\n    };\r\n    const { error } = await this.supabase.from('users').insert({\r\n      id: user.id, name: user.name, about: user.about, created_at: new Date(user.createdAt).toISOString()\r\n    });\r\n    if (error) console.warn('ensureUser insert failed', error);\r\n    this.cache.users.push(user);\r\n    return user;\r\n  }\r\n  getUserById(id){ return this.cache.users.find(u=>u.id===id) || null; }\r\n\r\n  async createPost(post){\r\n    // Always use the current authenticated user's UID as userId\r\n    let userId = null;\r\n    if (this.supabase && this.supabase.auth && this.supabase.auth.getUser) {\r\n      const authUser = await this.supabase.auth.getUser();\r\n      userId = authUser?.data?.user?.id || authUser?.user?.id;\r\n    }\r\n    if (!userId) throw new Error('No authenticated user');\r\n    const row = { ...this.mapPostToRow(post), user_id: userId };\r\n    const { error } = await this.supabase.from('posts').insert(row);\r\n    if(error) console.error('createPost error', error);\r\n    await this.refresh();\r\n    return this.cache.posts.find(p=>p.id===post.id);\r\n  }\r\n  async updatePost(id, patch){\r\n    const cur = this.cache.posts.find(p=>p.id===id);\r\n    if(!cur) return null;\r\n    const next = { ...cur, ...patch };\r\n    const row = this.mapPostToRow(next);\r\n    const { error } = await this.supabase.from('posts').update(row).eq('id', id);\r\n    if(error) console.error('updatePost error', error);\r\n    await this.refresh();\r\n    return this.cache.posts.find(p=>p.id===id);\r\n  }\r\n  async deletePost(id){\r\n    const { error } = await this.supabase.from('posts').delete().eq('id', id);\r\n    if(error) console.error('deletePost error', error);\r\n    await this.refresh();\r\n  }\r\n  async toggleLike(id, userId){\r\n    const cur = this.cache.posts.find(p=>p.id===id);\r\n    if(!cur) return null;\r\n    const likes = Array.isArray(cur.likes) ? [...cur.likes] : [];\r\n    const i = likes.indexOf(userId);\r\n    if(i>=0) likes.splice(i,1); else likes.push(userId);\r\n    const { error } = await this.supabase.from('posts').update({ likes }).eq('id', id);\r\n    if(error) console.error('toggleLike error', error);\r\n    await this.refresh();\r\n    return this.cache.posts.find(p=>p.id===id);\r\n  }\r\n  async addComment(id, c){\r\n    const cur = this.cache.posts.find(p=>p.id===id);\r\n    if(!cur) return null;\r\n    const comments = Array.isArray(cur.comments) ? [...cur.comments] : [];\r\n    comments.push(c);\r\n    const { error } = await this.supabase.from('posts').update({ comments }).eq('id', id);\r\n    if(error) console.error('addComment error', error);\r\n    await this.refresh();\r\n    const p = this.cache.posts.find(p=>p.id===id);\r\n    return p ? p.comments : comments;\r\n  }\r\n  async deleteComment(id, commentId){\r\n    const cur = this.cache.posts.find(p=>p.id===id);\r\n    if(!cur) return null;\r\n    const comments = (cur.comments || []).filter(c => c.id !== commentId);\r\n    const { error } = await this.supabase.from('posts').update({ comments }).eq('id', id);\r\n    if(error) console.error('deleteComment error', error);\r\n    await this.refresh();\r\n    const p = this.cache.posts.find(p=>p.id===id);\r\n    return p ? p.comments : comments;\r\n  }\r\n\r\n  async updateUser(id, patch){\r\n    // Always use the current authenticated user's UID for update\r\n    let userId = null;\r\n    if (this.supabase && this.supabase.auth && this.supabase.auth.getUser) {\r\n      const authUser = await this.supabase.auth.getUser();\r\n      userId = authUser?.data?.user?.id || authUser?.user?.id;\r\n    }\r\n    if (!userId) throw new Error('No authenticated user');\r\n    const update = {};\r\n  if (patch.name !== undefined) update.name = patch.name;\r\n  if (patch.about !== undefined) update.about = patch.about;\r\n  if (patch.avatarUrl !== undefined) update.avatarurl = patch.avatarUrl;\r\n  if (patch.facebook !== undefined) update.facebook = patch.facebook;\r\n  if (patch.instagram !== undefined) update.instagram = patch.instagram;\r\n  if (patch.twitter !== undefined) update.twitter = patch.twitter;\r\n  if (patch.bandcamp !== undefined) update.bandcamp = patch.bandcamp;\r\n  if (patch.soundcloud !== undefined) update.soundcloud = patch.soundcloud;\r\n  if (patch.youtube !== undefined) update.youtube = patch.youtube;\r\n  if (patch.lastfm !== undefined) update.lastfm = patch.lastfm;\r\n    if (Object.keys(update).length === 0) return this.getUserById(userId);\r\n    const { error } = await this.supabase.from('users').update(update).eq('id', userId);\r\n    if(error) console.error('updateUser error', error);\r\n    await this.refresh();\r\n    return this.getUserById(userId);\r\n  }\r\n\r\n  async replaceAll(data){\r\n    // Dangerous: clears all data. Intended for import/replace.\r\n    await this.supabase.from('posts').delete().neq('id','');\r\n    await this.supabase.from('users').delete().neq('id','');\r\n\r\n    const users = (data.users||[]).map(u => ({\r\n      id: u.id,\r\n      name: u.name,\r\n      about: u.about || null, // NEW\r\n      created_at: new Date(u.createdAt||Date.now()).toISOString()\r\n    }));\r\n    if(users.length){\r\n      const { error } = await this.supabase.from('users').upsert(users);\r\n      if(error) console.error('replaceAll users error', error);\r\n    }\r\n\r\n    const posts = (data.posts||[]).map(p => ({\r\n      ...this.mapPostToRow(p)\r\n    }));\r\n    if(posts.length){\r\n      const { error } = await this.supabase.from('posts').upsert(posts);\r\n      if(error) console.error('replaceAll posts error', error);\r\n    }\r\n\r\n    await this.refresh();\r\n  }\r\n  exportJSON(){\r\n    return JSON.stringify(this.cache, null, 2);\r\n  }\r\n}\r\n\r\nconst DB = (USE_SUPABASE && SUPABASE_URL && SUPABASE_ANON_KEY)\r\n  ? new SupabaseAdapter(SUPABASE_URL, SUPABASE_ANON_KEY)\r\n  : new LocalAdapter();\r\n\r\nexport default DB;", "// Export the main app state for use in notification helpers\r\nimport DB from './db.js';\r\nimport { currentUser } from '../auth/auth.js';\r\n\r\nexport const state = {\r\n  user: null,\r\n  queue: [],\r\n  qIndex: 0,\r\n  pageSize: 30,\r\n  page: 1,\r\n  forceLogin: false\r\n};\r\n\r\n// Always refresh user from Supabase (or local DB for local mode)\r\n// Supabase manages its own session persistence, so sessionStorage is not needed for remote users\r\nexport async function refreshUser() {\r\n  state.user = await currentUser(DB);\r\n}", "import notificationsView from '../views/notifications_view.js';\r\nimport notifications from './notifications.js';\r\nimport { state } from './app_state.js';\r\nimport DB from './db.js';\r\n\r\nfunction getUserPostActivityKey(userId) {\r\n  return `tunedin_post_activity_${userId}`;\r\n}\r\n\r\nfunction getStoredActivity(userId) {\r\n  try {\r\n    return JSON.parse(localStorage.getItem(getUserPostActivityKey(userId)) || '{}');\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\n\r\nfunction setStoredActivity(userId, data) {\r\n  localStorage.setItem(getUserPostActivityKey(userId), JSON.stringify(data));\r\n}\r\n\r\nasync function checkForNewPostActivity() {\r\n  if (!state.user) return;\r\n  if (DB.refresh) await DB.refresh();\r\n  const db = DB.getAll();\r\n  const myPosts = db.posts.filter(p => p.userId === state.user.id);\r\n  const stored = getStoredActivity(state.user.id);\r\n  let changed = false;\r\n  myPosts.forEach(post => {\r\n    const prev = stored[post.id] || { likes: 0, comments: 0 };\r\n    if ((post.likes?.length || 0) > prev.likes) {\r\n      notifications.add(`Your post \"${post.title}\" received a new like!`, 'info');\r\n      changed = true;\r\n    }\r\n    if ((post.comments?.length || 0) > prev.comments) {\r\n      notifications.add(`Your post \"${post.title}\" received a new comment!`, 'info');\r\n      changed = true;\r\n    }\r\n    stored[post.id] = {\r\n      likes: post.likes?.length || 0,\r\n      comments: post.comments?.length || 0\r\n    };\r\n  });\r\n  if (changed) setStoredActivity(state.user.id, stored);\r\n}\r\n\r\n// Initialize notifications UI and show a test notification on DOMContentLoaded\r\nwindow.addEventListener('DOMContentLoaded', function() {\r\n  notificationsView.init();\r\n  // Remove test notification\r\n  // notifications.add('Test notification: If you see this, notifications are working!', 'info', 5000);\r\n  setTimeout(() => {\r\n    checkForNewPostActivity();\r\n    setInterval(checkForNewPostActivity, 10000);\r\n  }, 1000);\r\n});\r\n"],
  "mappings": "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",
  "names": ["NOTIF_KEY", "loadPersisted", "raw", "arr", "now", "n", "notifications", "message", "type", "timeout", "id", "expires", "fn", "l", "notifications_default", "containerId", "notificationsView", "notifications_default", "list", "NOTIF_SEEN_KEY", "lastSeen", "unseen", "n", "maxId", "el", "notifications_view_default", "safeClone", "o", "SUPABASE_URL", "SUPABASE_ANON_KEY", "DISPOSABLE_EMAIL_DOMAINS", "isDisposableEmail", "email", "domain", "parts", "i", "checkDomain", "DB_KEY_V2", "DB_KEY_V1", "defaultDB", "LocalAdapter", "id", "u", "p", "v2", "safeClone", "v1", "old", "name", "password", "x", "salt", "hash", "user", "patch", "userId", "c", "postId", "commentId", "data", "SupabaseAdapter", "postError", "userError", "url", "key", "createClient", "row", "uRes", "pRes", "users", "r", "posts", "authUser", "existing", "error", "post", "cur", "next", "likes", "comments", "update", "DB", "SUPABASE_URL", "SUPABASE_ANON_KEY", "db_default", "state", "getUserPostActivityKey", "userId", "getStoredActivity", "setStoredActivity", "data", "checkForNewPostActivity", "state", "db_default", "myPosts", "p", "stored", "changed", "post", "prev", "notifications_default", "notifications_view_default"]
}
